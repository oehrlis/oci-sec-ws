# ------------------------------------------------------------------------------
# OraDBA - Oracle Database Infrastructure and Security, 5630 Muri, Switzerland
# ------------------------------------------------------------------------------
# Name.......: tagged-release.yaml 
# Author.....: Stefan Oehrli (oes) stefan.oehrli@oradba.ch
# Editor.....: Stefan Oehrli
# Date.......: 2024.10.25
# Revision...: 
# Purpose....: GitHub action to create a tagged release
# Notes......: Extended to zip the ./oci folder and add it to artifacts
# Reference..: https://github.com/DavidAnson/markdownlint
# ------------------------------------------------------------------------------
name: Doc and web tagged release

on:
  push:
    tags:
      - "v*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  LANGUAGE: de
  NAME_PREFIX: OCI-SEC-WS
  DOC_FOLDER: doc
  LAB_FOLDER: lab

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # - Check Markdown -----------------------------------------------------------
  # job to check the documentation
  check_docs:
    name: Check Markdown
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      # Check Markdown using markdownlint-cli from docker images 06kellyjac/markdownlint-cli
      - name: run markdownlint-cli
        uses: docker://06kellyjac/markdownlint-cli
        with:
          args: .

  # - Verify Terraform Configuration --------------------------------------------
  # Job to verify the Terraform configuration in the oci folder
  check_terraform:
    name: Verify Terraform Configuration
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Initialize the Terraform configuration
      - name: Initialize Terraform
        working-directory: oci
        run: terraform init

      # Validate the Terraform configuration
      - name: Validate Terraform
        working-directory: oci
        run: terraform validate

      # Install tflint for linting Terraform files
      - name: Install TFLint
        run: |
          curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # Run TFLint to lint Terraform files
      - name: Lint Terraform
        working-directory: oci
        run: tflint -c ${{ github.workspace }}/oci/.tflint.hcl

# - Build requirements documentation -------------------------------------------
  # Job to build the requirements documentation
  build_req_doc:
    needs: check_docs
    name: Build requirements PDF document
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Build PDF using docker images oehrlis/pandoc
      - name: run pandoc to build pdf document
        uses: docker://oehrlis/pandoc
        with:
          args: >-
            --pdf-engine=xelatex 
            --listings
            --metadata-file=doc/metadata_requirements.yml
            --resource-path=.:images
            --filter pandoc-latex-environment
            --output=${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf ${{ env.DOC_FOLDER }}/0x04_Requirements.md
      
      # Upload generated pdf document as artifact
      - name: Upload requirement pdf document as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf
          path: ${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf

# - Build lab documentation ----------------------------------------------------
  # Job to build the lab and exercise guide
  build_lab_doc:
    needs: check_docs
    name: Build Lab and Exercise Guide
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Create a variable for a list of MD files
      - name: Populate env variables
        run: |
          echo "MD_FILES=$(printf '%s ' ${{ env.DOC_FOLDER }}/[0-8]x??-*.md ${{ env.LAB_FOLDER }}/ex??/?x??-*.md ${{ env.DOC_FOLDER }}/9x??-*.md)" >> $GITHUB_ENV
      # Update the image base folder to match image page during pandoc build
      - name: Preparing Markdown files for pandoc (fix image path, remove front matter,...)
        run: |
          for i in $MD_FILES ;do
            echo "process file $i"
            sed -i 's|\(./\)*../../images/|images/|' $i
            sed -i '1{/^---$/!q;};1,/^---$/d' $i
            sed -i 's/{:.*}$//'  $i
          done
      # Build PDF using docker images oehrlis/pandoc
      - name: run pandoc to build pdf document
        uses: docker://oehrlis/pandoc
        with:
          args: >-
            --pdf-engine=xelatex 
            --listings
            --metadata-file=doc/metadata.yml
            --resource-path=.:images
            --filter pandoc-latex-environment
            --output=${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf ${{ env.MD_FILES }}

      # Upload generated pdf document as artifact
      - name: Upload Lab pdf document as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf 
          path: ${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf 

# - Build lab documentation ----------------------------------------------------
  # Job to build the lab and exercise guide
  build_oci_stack:
    needs: check_terraform
    name: Build OCI Stack
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Create a zip file of the oci folder
      - name: Create ZIP file of OCI folder
        run: zip -r "${{ github.event.repository.name }}_stack.zip" oci

      # Upload the generated ZIP file as an artifact
      - name: Upload OCI ZIP file as artifact 
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}_stack.zip
          path: ${{ github.event.repository.name }}_stack.zip

# - Build Release --------------------------------------------------------------
# Job to build a draft release
  tagged-release:
    needs: [build_lab_doc, build_req_doc, build_oci_stack] 
    name: Create a tagged release
    runs-on: ubuntu-latest

    # Ensure the GITHUB_TOKEN has the correct permissions
    permissions:
      contents: write

    steps:
      # download generated pdf document from artifact
      - name: Get lab document from artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf 

      # download generated requirements pdf document from artifact
      - name: Get requirements document from artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf

      # Upload the zip file as an artifact
      - name: Upload OCI zip file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.repository }}_stack.zip
          path: ${{ github.repository }}_stack.zip

      # Create or update a release
      - name: Create or update a release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          files: |
            ${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf
            ${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf
            ${{ github.repository }}_stack.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build job
  build_web:
    name: Build Jekyll base Github pages
    runs-on: ubuntu-latest
    needs: [build_lab_doc, build_req_doc, build_oci_stack] 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # download generated pdf document from artifact
      - name: Get lab document from artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_lab_${{ env.LANGUAGE }}.pdf 
          path: others

      # download generated requirements pdf document from artifact
      - name: Get requirements document from artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME_PREFIX }}_requirements_${{ env.LANGUAGE }}.pdf
          path: others

      # download generated requirements pdf document from artifact
      - name: Get OCI stack from artifact store
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.repository }}_stack.zip
          path: others

      # Remove special syntax in Markdown files
      - name: Remove special syntax in Markdown files
        run: |
          for i in $(find . -name "*.md"); do
            echo "process file $i"
            sed -i 's|{.unlisted .unnumbered}||' $i
            sed -i 's|{-}||' $i
            sed -i '/^:::/d' $i
          done

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy_web:
    name: Deploy Github pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_web
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
# --- EOF -------------------------------------------------------------------
